import React, { PropTypes, Component } from 'react';
// import { Link } from 'react-router';
import { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';
import { Button } from 'react-bootstrap';
import Select from 'react-select';
import _ from 'lodash';
import DateTime from 'react-datetime';

const EditModal = require('./EditModal');
const DelNotify = require('./DelNotify');
const img = require('../../assets/images/loading.gif');

export default class List extends Component {
  constructor(props) {
    super(props);
    this.state = { editModalShow: false, delNotifyShow: false, willSetStartTimeVersionIds: [], settingStartTimeVersionIds: [], willSetEndTimeVersionIds: [], settingEndTimeVersionIds: [] , start_time: {}, end_time: {} };
    this.editModalClose = this.editModalClose.bind(this);
    this.delNotifyClose = this.delNotifyClose.bind(this);
  }

  static propTypes = {
    collection: PropTypes.array.isRequired,
    selectedItem: PropTypes.object.isRequired,
    item: PropTypes.object.isRequired,
    itemLoading: PropTypes.bool.isRequired,
    indexLoading: PropTypes.bool.isRequired,
    index: PropTypes.func.isRequired,
    show: PropTypes.func.isRequired,
    edit: PropTypes.func.isRequired,
    del: PropTypes.func.isRequired,
    delNotify: PropTypes.func.isRequired,
    options: PropTypes.object.isRequired
  }

  componentWillMount() {
    const { index } = this.props;
    index();
  }

  editModalClose() {
    this.setState({ editModalShow: false });
  }

  delNotifyClose() {
    this.setState({ delNotifyShow: false });
  }

  show(id) {
    this.setState({ editModalShow: true });
    const { show } = this.props;
    show(id);
  }

  delNotify(id) {
    this.setState({ delNotifyShow: true });
    const { delNotify } = this.props;
    delNotify(id);
  }

  willSetStartTime(versionId) {
    this.state.willSetStartTimeVersionIds.push(versionId);
    this.setState({ willSetStartTimeVersionIds: this.state.willSetStartTimeVersionIds });
  }

  cancelSetStartTime(versionId) {
    const index = this.state.willSetStartTimeVersionIds.indexOf(versionId);
    this.state.willSetStartTimeVersionIds.splice(index, 1);
    // clean permission in the state
    this.state.start_time[versionId] = undefined;

    this.setState({ willSetStartTimeVersionIds: this.state.willSetStartTimeVersionIds, start_time: this.state.start_time });
  }

  async setStartTime(versionId) {
    this.state.settingStartTimeVersionIds.push(versionId);
    const index = _.indexOf(this.state.willSetStartTimeVersionIds, versionId);
    this.state.willSetStartTimeVersionIds.splice(index, 1);
    this.setState({ settingStartTimeVersionIds: this.state.settingStartTimeVersionIds, willSetStartTimeVersionIds: this.state.willSetStartTimeVersionIds });

    const { edit } = this.props;
    const ecode = await edit({ start_time: this.state.start_time[versionId], id: versionId });
    if (ecode === 0) {
      const index = _.indexOf(this.state.settingStartTimeVersionIds, versionId);
      this.state.settingStartTimeVersionIds.splice(index, 1);
      this.setState({ settingStartTimeVersionIds: this.state.settingStartTimeVersionIds });
    }
  }

  handleStartTimeSelectChange(versionId, value) {
    this.state.start_time[versionId] = value;
    this.setState({ start_time: this.state.start_time });
  }

  willSetEndTime(versionId) {
    this.state.willSetEndTimeVersionIds.push(versionId);
    this.setState({ willSetEndTimeVersionIds: this.state.willSetEndTimeVersionIds });
  }

  cancelSetEndTime(versionId) {
    const index = this.state.willSetEndTimeVersionIds.indexOf(versionId);
    this.state.willSetEndTimeVersionIds.splice(index, 1);
    // clean permission in the state
    this.state.end_time[versionId] = undefined;

    this.setState({ willSetEndTimeVersionIds: this.state.willSetEndTimeVersionIds, end_time: this.state.end_time });
  }

  async setEndTime(versionId) {
    this.state.settingEndTimeVersionIds.push(versionId);
    const index = _.indexOf(this.state.willSetEndTimeVersionIds, versionId);
    this.state.willSetEndTimeVersionIds.splice(index, 1);
    this.setState({ settingEndTimeVersionIds: this.state.settingEndTimeVersionIds, willSetEndTimeVersionIds: this.state.willSetEndTimeVersionIds });

    const { edit } = this.props;
    const ecode = await edit({ end_time: this.state.end_time[versionId], id: versionId });
    if (ecode === 0) {
      const index = _.indexOf(this.state.settingEndTimeVersionIds, versionId);
      this.state.settingEndTimeVersionIds.splice(index, 1);
      this.setState({ settingEndTimeVersionIds: this.state.settingEndTimeVersionIds });
    }
  }

  handleEndTimeSelectChange(versionId, value) {
    this.state.end_time[versionId] = value;
    this.setState({ end_time: this.state.end_time });
  }

  render() {
    const { collection, selectedItem, item, options, indexLoading, itemLoading, del, edit } = this.props;
    const { willSetStartTimeVersionIds, settingStartTimeVersionIds, willSetEndTimeVersionIds, settingEndTimeVersionIds } = this.state;

    const { users = [] } = options;
    const userOptions = _.map(users, function(val) {
      return { label: val.name, value: val.id };
    });

    const types = [];
    const typeNum = collection.length;
    for (let i = 0; i < typeNum; i++) {
      types.push({
        name: ( 
          <div>
            <span className='table-td-title'>{ collection[i].name }</span>
            { collection[i].description && <span className='table-td-desc'>{ collection[i].description }</span> }
          </div>
        ),
        start_time: (
          <div>
          { _.indexOf(willSetStartTimeVersionIds, collection[i].id) === -1 && _.indexOf(settingStartTimeVersionIds, collection[i].id) === -1 ?
            <div className='editable-list-field'>
              <div style={ { display: 'table', width: '100%' } }>
              { collection[i].start_time ?
                <span>
                  <div style={ { display: 'inline-block', float: 'left', margin: '3px', marginBottom: '6px' } }> 
                    { collection[i].start_time }
                  </div>
                </span> 
                :
                '-' }
                <span className='edit-icon-zone edit-icon' onClick={ this.willSetStartTime.bind(this, collection[i].id) }><i className='fa fa-pencil'></i></span>
              </div>
            </div>
            :
            <div>
               <DateTime locale='zh-cn' mode='date' dateFormat='YYYY/MM/DD' timeFormat={ false } value={ this.state.start_time[collection[i].id] || collection[i].start_time } onChange={ this.handleStartTimeSelectChange.bind(this, collection[i].id) }/>
              <div className={ _.indexOf(settingStartTimeVersionIds, collection[i].id) !== -1 ? 'hide' : '' } style={ { float: 'right' } }>
                <Button className='edit-ok-button' onClick={ this.setStartTime.bind(this, collection[i].id) }><i className='fa fa-check'></i></Button>
                <Button className='edit-ok-button' onClick={ this.cancelSetStartTime.bind(this, collection[i].id) }><i className='fa fa-close'></i></Button>
              </div>
            </div>
          }
          <image src={ img } style={ { float: 'right' } } className={ _.indexOf(settingStartTimeVersionIds, collection[i].id) !== -1 ? 'loading' : 'hide' }/>
          </div>
        ),
        end_time: (
          <div>
          { _.indexOf(willSetEndTimeVersionIds, collection[i].id) === -1 && _.indexOf(settingEndTimeVersionIds, collection[i].id) === -1 ?
            <div className='editable-list-field'>
              <div style={ { display: 'table', width: '100%' } }>
              { collection[i].end_time ?
                <span>
                  <div style={ { display: 'inline-block', float: 'left', margin: '3px', marginBottom: '6px' } }> 
                    { collection[i].end_time }
                  </div>
                </span> 
                :
                '-' }
                <span className='edit-icon-zone edit-icon' onClick={ this.willSetEndTime.bind(this, collection[i].id) }><i className='fa fa-pencil'></i></span>
              </div>
            </div>
            :
            <div>
               <DateTime locale='zh-cn' mode='date' dateFormat='YYYY/MM/DD' timeFormat={ false } value={ this.state.end_time[collection[i].id] || collection[i].end_time } onChange={ this.handleEndTimeSelectChange.bind(this, collection[i].id) }/>
              <div className={ _.indexOf(settingEndTimeVersionIds, collection[i].id) !== -1 ? 'hide' : '' } style={ { float: 'right' } }>
                <Button className='edit-ok-button' onClick={ this.setEndTime.bind(this, collection[i].id) }><i className='fa fa-check'></i></Button>
                <Button className='edit-ok-button' onClick={ this.cancelSetEndTime.bind(this, collection[i].id) }><i className='fa fa-close'></i></Button>
              </div>
            </div>
          }
          <image src={ img } style={ { float: 'right' } } className={ _.indexOf(settingEndTimeVersionIds, collection[i].id) !== -1 ? 'loading' : 'hide' }/>
          </div>
        ),
        operation: (
          <div>
            <div className={ itemLoading && selectedItem.id === collection[i].id && 'hide' }>
              <Button bsStyle='link' disabled = { itemLoading && true } onClick={ this.show.bind(this, collection[i].id) }>编辑</Button>
              <Button bsStyle='link' disabled = { itemLoading && true } onClick={ this.delNotify.bind(this, collection[i].id) }>删除</Button>
            </div>
            <image src={ img } className={ (itemLoading && selectedItem.id === collection[i].id) ? 'loading' : 'hide' }/>
          </div>
        )
      });
    }

    const opts = {};
    if (indexLoading) {
      opts.noDataText = ( <div><image src={ img } className='loading'/></div> );
    } else {
      opts.noDataText = '暂无数据显示。';
    }

    return (
      <div>
        <BootstrapTable data={ types } bordered={ false } hover options={ opts } trClassName='tr-middle'>
          <TableHeaderColumn dataField='name' isKey>名称</TableHeaderColumn>
          <TableHeaderColumn dataField='start_time'>开始时间</TableHeaderColumn>
          <TableHeaderColumn dataField='end_time'>结束时间</TableHeaderColumn>
          <TableHeaderColumn width='120' dataField='operation'>操作</TableHeaderColumn>
        </BootstrapTable>
        { this.state.editModalShow && <EditModal show close={ this.editModalClose } edit={ edit } data={ selectedItem } options={ options } collection={ collection }/> }
        { this.state.delNotifyShow && <DelNotify show close={ this.delNotifyClose } data={ selectedItem } del={ del }/> }
      </div>
    );
  }
}
